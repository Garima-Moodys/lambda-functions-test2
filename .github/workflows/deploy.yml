name: Deploy SAM Application to AWS

# Trigger the workflow on push to main 
on:
  push:
    branches:
      - main  

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up AWS credentials
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  

    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    # Step 4: Fetch the changed files between commits
    - name: Fetch changed files
      id: fetch_changes
      run: |
        echo "Before commit: ${{ github.event.before }}"
        echo "Current commit: ${{ github.sha }}"
        
        # Ensure the "before" commit exists. Use HEAD~1 if it's missing (e.g., in case of the first commit).
        before_commit="${{ github.event.before }}"
        if [ -z "$before_commit" ]; then
          echo "No before commit, falling back to HEAD~1"
          before_commit="HEAD~1"
        fi
        echo "Using before commit: $before_commit"

        # Fetch full commit history to ensure all commits are available
        echo "Fetching full commit history..."
        git fetch --prune --unshallow

        # Get the list of changed files between the before commit and the current commit
        changed_files=$(git diff --name-only $before_commit ${{ github.sha }})
        echo "Changed files:"
        echo "$changed_files"
        
        # Set the changed files as output
        echo "::set-output name=changed_files::$changed_files"

    # Step 5: Build Python functions if changed
    - name: Build Python functions
      if: contains(steps.fetch_changes.outputs.changed_files, 'python/src')
      run: |
        # Get the list of changed files and filter for Python functions
        changed_files="${{ steps.fetch_changes.outputs.changed_files }}"
        changed_functions=""
        for file in $changed_files; do
          if [[ "$file" == python/src/* ]]; then
            function_name=$(basename "$file" | cut -d '.' -f 1)
            if [[ ! " ${changed_functions} " =~ " ${function_name} " ]]; then
              changed_functions="${changed_functions} ${function_name}"
            fi
          fi
        done
        if [ -n "$changed_functions" ]; then
          for function in $changed_functions; do
            echo "Building Python function: $function"
            cd python
            sam build $function --use-container
          done
        else
          echo "No changes detected in Python functions"
        fi

    # Step 6: Build C# functions if changed
    - name: Build C# functions
      if: contains(steps.fetch_changes.outputs.changed_files, 'c-sharp')
      run: |
        # Get the list of changed files and filter for C# functions
        changed_files="${{ steps.fetch_changes.outputs.changed_files }}"
        changed_functions=""
        for file in $changed_files; do
          if [[ "$file" == c-sharp/src/* ]]; then
            function_name=$(basename "$file" | cut -d '.' -f 1)
            if [[ ! " ${changed_functions} " =~ " ${function_name} " ]]; then
              changed_functions="${changed_functions} ${function_name}"
            fi
          fi
        done
        if [ -n "$changed_functions" ]; then
          for function in $changed_functions; do
            echo "Building C# function: $function"
            cd c-sharp
            sam build $function --use-container
          done
        else
          echo "No changes detected in C# functions"
        fi

    # Step 7: Build Java functions if changed
    - name: Build Java functions
      if: contains(steps.fetch_changes.outputs.changed_files, 'java')
      run: |
        # Get the list of changed files and filter for Java functions
        changed_files="${{ steps.fetch_changes.outputs.changed_files }}"
        changed_functions=""
        for file in $changed_files; do
          if [[ "$file" == java/src/* ]]; then
            function_name=$(basename "$file" | cut -d '.' -f 1)
            if [[ ! " ${changed_functions} " =~ " ${function_name} " ]]; then
              changed_functions="${changed_functions} ${function_name}"
            fi
          fi
        done
        if [ -n "$changed_functions" ]; then
          for function in $changed_functions; do
            echo "Building Java function: $function"
            cd java
            sam build $function --use-container
          done
        else
          echo "No changes detected in Java functions"
        fi

    # Step 8: Build Node.js functions if changed
    - name: Build Node.js functions
      if: contains(steps.fetch_changes.outputs.changed_files, 'node-js')
      run: |
        # Get the list of changed files and filter for Node.js functions
        changed_files="${{ steps.fetch_changes.outputs.changed_files }}"
        changed_functions=""
        for file in $changed_files; do
          if [[ "$file" == node-js/src/* ]]; then
            function_name=$(basename "$file" | cut -d '.' -f 1)
            if [[ ! " ${changed_functions} " =~ " ${function_name} " ]]; then
              changed_functions="${changed_functions} ${function_name}"
            fi
          fi
        done
        if [ -n "$changed_functions" ]; then
          for function in $changed_functions; do
            echo "Building Node.js function: $function"
            cd node-js
            sam build $function --use-container
          done
        else
          echo "No changes detected in Node.js functions"
        fi

    # Step 9: Deploy the functions
    # - name: Deploy Updated Functions
    #   run: |
    #     # Deploy all functions that were built
    #     cd python
    #     sam deploy
    #     cd ../c-sharp
    #     sam deploy
    #     cd ../java
    #     sam deploy
    #     cd ../node-js
    #     sam deploy
