name: Deploy SAM Application to AWS

# Trigger the workflow on push to main
on:
  push:
    branches:
      - main  

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
    # Step 1: Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up AWS credentials
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  

    # Step 4: Set up AWS SAM CLI
    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    # Step 5: Cache .aws-sam folder for each language
    - name: Cache Python .aws-sam folder
      uses: actions/cache@v3
      with:
        path: python/.aws-sam
        key: ${{ runner.os }}-python-${{ hashFiles('python/template.yaml', 'python/src/**/*') }}
        restore-keys: |
          ${{ runner.os }}-python-

    - name: Cache C-Sharp .aws-sam folder
      uses: actions/cache@v3
      with:
        path: c-sharp/.aws-sam
        key: ${{ runner.os }}-c-sharp-${{ hashFiles('c-sharp/template.yaml', 'c-sharp/src/**/*') }}
        restore-keys: |
          ${{ runner.os }}-c-sharp-

    - name: Cache Java .aws-sam folder
      uses: actions/cache@v3
      with:
        path: java/.aws-sam
        key: ${{ runner.os }}-java-${{ hashFiles('java/template.yaml', 'java/src/**/*') }}
        restore-keys: |
          ${{ runner.os }}-java-

    - name: Cache Node.js .aws-sam folder
      uses: actions/cache@v3
      with:
        path: node-js/.aws-sam
        key: ${{ runner.os }}-node-js-${{ hashFiles('node-js/template.yaml', 'node-js/src/**/*') }}
        restore-keys: |
          ${{ runner.os }}-node-js-

    # Step 6: Build and deploy Python function
    - name: Deploy Updated Python Functions
      run: |
        cd python
        sam build --use-container
        sam deploy --no-fail-on-empty-changeset


    # Step 7: Deploy C-Sharp
    - name: Deploy C-Sharp Functions
      run: |
        cd c-sharp
        sam build --use-container --mount-with WRITE
        sam deploy --no-fail-on-empty-changeset

    # Step 8: Deploy Java Functions
    - name: Deploy Java Functions
      run: |
        cd java
        sam build --use-container
        sam deploy --no-fail-on-empty-changeset

    # Step 9: Deploy Node.js Functions
    - name: Deploy Node.js Functions
      run: |
        cd node-js
        sam build --use-container
        sam deploy --no-fail-on-empty-changeset
